#---------Bibliotecas---------#

import socket
from tqdm import tqdm
import time

#---------Padroes---------#

port_pattern = [21, 22, 25, 53, 80, 110, 135, 136, 137, 138, 139, 143, 443, 3306, 3389, 8080]
all_port = range(65535)

a = 0

rp = []

#---------CLASS---------#

class PORTSCAN:
    def __init__(self, ip, port, s):
        self.s = s
        self.ip = ip
        self.port = port
    pass
    
    def prun(self):

        target = self.ip
        ports = self.port

        if(ports == "P" or ports == "p"):
            global port_pattern

            print("\nINICIANDO ESCANEAMENTO DAS PORTAS PADRÕES\n")

            for tport in tqdm(port_pattern):
                client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                client.settimeout(0.05)
                code = client.connect_ex((target, tport))
                codet = str(code)
                if(codet == '0'):
                    rp.append(tport)
        else:
            global all_port

            print("\nINICIANDO ESCANEAMENTO DE TODAS AS PORTAS\n")

            for tport in tqdm(all_port):
                client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                client.settimeout(0.05)
                code = client.connect_ex((target, tport))
                codet = str(code)
                if(codet == '0'):
                    rp.append(tport)

    pass

    def scano(self):
        global rp

        print("\n#######################################################\n")
        print("                Relatório de PortScan                      ")
        print("\n - Portas abertas:\n")
        for p in rp:
            print('PORTA: {} <----> '.format(p) + '\033[32m' + 'ABERTA' + '\033[0;0m\n')
    pass

    def save(self):
        global rp

        save = self.s

        if(save == 'sim' or save == 'Sim'):
            if(self.port == "P" or self.port == "p"):
                tp = "pattern"
            else:
                tp = "all"
            sn = (f'saves/{tp}_{self.ip}.txt')
            arq = open(sn, 'a')
            arq.write('\n#######################################################\n\n')
            arq.write("                Relatório de PortScan                      ")
            arq.write("\n\n - Portas abertas:\n\n")
            for i in rp:
                arq.write(f'PORTA: {i} <----> ABERTA\n')
            arq.close()
            print(f' Relatório Escrito Concluido.\n Foi salvo em: {sn}')
    pass